from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from keybords import *

from aiogram import types, Dispatcher

from app import *
from other import *

flag = 'count'


async def start_cmd(message: types.Message):
    await message.answer(f'{message.from_user.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!',
                         reply_markup=start_kb())


async def cancel_cmd(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå', reply_markup=start_kb())


async def key_words_cmd(message: types.Message):
    await ParseStatesKeywords.key_words.set()
    await message.answer('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞',
                         reply_markup=cancel_kb())
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ‚öôÔ∏è', reply_markup=keywords_ikb())


async def add_key_word2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['keyword'] = message.text
    await db_add_keyword(state)
    await message.answer('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=start_kb())
    await state.finish()


async def delete_key_word2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['keyword'] = message.text
    await db_delete_keyword(state)
    await message.answer('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ ‚ùå', reply_markup=start_kb())
    await state.finish()


async def minus_words_cmd(message: types.Message):
    await ParseStatesMinuswords.minus_words.set()
    await message.answer('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞"',
                         reply_markup=cancel_kb())
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ‚öôÔ∏è', reply_markup=minuswords_ikb())


async def add_minus_word2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['minusword'] = message.text
    await db_add_minusword(state)
    await message.answer('–ú–∏–Ω—É—Å —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=start_kb())
    await state.finish()


async def delete_minus_word2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['minusword'] = message.text
    await db_delete_minusword(state)
    await message.answer('–ú–∏–Ω—É—Å —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ ‚ùå', reply_markup=start_kb())
    await state.finish()


async def links_cmd(message: types.Message):
    await ParseStatesLinks.links.set()
    await message.answer('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ùå –û—Ç–º–µ–Ω–∞',
                         reply_markup=cancel_kb())
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ‚öôÔ∏è', reply_markup=links_ikb())


async def check_index(message: types.Message):
    await message.answer('–ù–µ–ø—Ä–∞–≤–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è')


async def add_link1(message: types.Message, state: FSMContext):
    await ParseStatesLinks.links_add.set()
    async with state.proxy() as data:
        data['index'] = message.text
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n–ü—Ä–∏–º–µ—Ä: https://t.me/freelead')


async def add_link2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['link'] = message.text
    await db_add_links(state)
    await message.answer('–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ', reply_markup=start_kb())
    await state.finish()


async def delete_links2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['link'] = message.text
    await db_delete_links(state)
    await message.answer('–ß–∞—Ç —É–¥–∞–ª–µ–Ω ‚ùå', reply_markup=start_kb())
    await state.finish()


async def start_parse(message: types.Message, state: FSMContext):
    await ParseState.start_parse.set()
    async with state.proxy() as data:
        data['userid1'] = message.from_user.id
    await db_userid_client(state)

    await message.answer('–ü–æ–¥–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—á–∞–ª—Å—è ‚ñ∂Ô∏è', reply_markup=parse_kb())

    db = sq.connect('tg_message_parse.db')
    cur = db.cursor()

    if cur.execute("SELECT flag1 FROM count").fetchone() is not None:
        cur.execute("DELETE FROM count WHERE flag1 == ?", (flag,))
    if cur.execute("SELECT flag2 FROM count").fetchone() is not None:
        cur.execute("DELETE FROM count WHERE flag2 == ?", (flag,))
    if cur.execute("SELECT flag3 FROM count").fetchone() is not None:
        cur.execute("DELETE FROM count WHERE flag3 == ?", (flag,))
    db.commit()

    url1 = cur.execute("SELECT links FROM counts_links WHERE indexes == '1'").fetchone()
    url2 = cur.execute("SELECT links FROM counts_links WHERE indexes == '2'").fetchone()
    url3 = cur.execute("SELECT links FROM counts_links WHERE indexes == '3'").fetchone()
    channel1 = await client.get_entity(url1[0])
    channel2 = await client.get_entity(url2[0])
    channel3 = await client.get_entity(url3[0])
    await main_func(channel1, channel2, channel3)


async def cancel_parse(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå', reply_markup=start_kb())
    db = sq.connect('tg_message_parse.db')
    cur = db.cursor()
    cur.execute("INSERT INTO count (flag1, flag2, flag3) VALUES (?, ?, ?)", (flag, flag, flag))
    db.commit()


def register_message_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=['start'])
    dp.register_message_handler(cancel_cmd, Text(equals='‚ùå –û—Ç–º–µ–Ω–∞'), state='*')
    dp.register_message_handler(key_words_cmd, Text(equals='üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'))
    dp.register_message_handler(add_key_word2, state=ParseStatesKeywords.key_words_add)
    dp.register_message_handler(delete_key_word2, state=ParseStatesKeywords.key_words_delete)
    dp.register_message_handler(minus_words_cmd, Text(equals='‚ûñ –ú–∏–Ω—É—Å —Å–ª–æ–≤–∞'))
    dp.register_message_handler(add_minus_word2, state=ParseStatesMinuswords.minus_words_add)
    dp.register_message_handler(delete_minus_word2, state=ParseStatesMinuswords.minus_words_delete)
    dp.register_message_handler(links_cmd, Text(equals='üí¨ –ß–∞—Ç—ã'))
    dp.register_message_handler(check_index,
                                lambda message: message.text != '1' and message.text != '2' and message.text != '3',
                                state=ParseStatesLinks.links)
    dp.register_message_handler(add_link1, state=ParseStatesLinks.links)
    dp.register_message_handler(add_link2, state=ParseStatesLinks.links_add)
    dp.register_message_handler(delete_links2, state=ParseStatesLinks.links_delete)
    dp.register_message_handler(start_parse, Text(equals='‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π'))
    dp.register_message_handler(cancel_parse, Text(equals='‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É'),
                                state=ParseState.start_parse)
